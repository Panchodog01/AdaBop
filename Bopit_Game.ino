#include <Adafruit_CircuitPlayground.h>
#include <AsyncDelay.h>
#include <Wire.h>
#include <SPI.h>

/*
Credit to Chet Udell for the Rainbow Cycle function used to show the standby state
*/








// Speech Values
const uint8_t spPRESS[] PROGMEM = { 0x04, 0xA8, 0x34, 0x9D, 0x01, 0x2D, 0x44, 0x0A, 0x20, 0xF7, 0xAC, 0x60, 0xA7, 0x2E, 0xA6, 0xE6, 0x76, 0xAA, 0xBB, 0xBC, 0x3C, 0x28, 0xBD, 0xAC, 0xC9, 0xF1, 0x6B, 0x31, 0x37, 0xD7, 0x35, 0x27, 0x6A, 0x21, 0x34, 0xC2, 0x56, 0x9F, 0x7C, 0xF8, 0x12, 0x0B, 0x59, 0x7D, 0x9A, 0x19, 0x4A, 0x34, 0x65, 0xCD, 0x6A, 0x87, 0x77, 0x89, 0xD4, 0x25, 0xA9, 0x6F, 0x8E, 0x7C, 0x3C, 0xEA, 0x08, 0x20, 0x73, 0x53, 0x01, 0x7C, 0x25, 0xC6, 0x80, 0x4F, 0xD5, 0x08, 0xF0, 0x0D, 0x1B, 0x03, 0xBE, 0x21, 0x63, 0xC0, 0x57, 0x6C, 0x04, 0xF8, 0x42, 0x92, 0x00, 0x4F, 0x90, 0x22, 0xE0, 0x7B, 0x56, 0x04, 0x7C, 0x47, 0x82, 0x80, 0xEF, 0x84, 0x11, 0xF0, 0x03, 0xE9, 0xFF, 0x59, 0x41, 0x25, 0x71, 0x79, 0x25, 0x05 };
const uint8_t spSWITCH[] PROGMEM = { 0x08, 0xB8, 0x84, 0x95, 0x01, 0x5F, 0x73, 0x30, 0xE0, 0x73, 0x0B, 0x01, 0x7C, 0xE9, 0xA6, 0x80, 0x2F, 0x22, 0x05, 0xF0, 0xB5, 0xB8, 0x02, 0xBE, 0x51, 0x53, 0xC0, 0x6F, 0x66, 0x02, 0xE8, 0x3A, 0x2B, 0x78, 0x89, 0x47, 0xB8, 0x89, 0x97, 0xE2, 0x47, 0xB5, 0x2A, 0xA1, 0x9F, 0x4E, 0xD0, 0x69, 0xAA, 0x25, 0xAD, 0x3E, 0xD1, 0x94, 0xC1, 0x3A, 0xBA, 0xF9, 0x14, 0x33, 0x05, 0x69, 0xD9, 0xE2, 0x52, 0x0F, 0xAF, 0xA4, 0x59, 0x8F, 0x51, 0x23, 0x94, 0xBB, 0x8B, 0xC8, 0x06, 0x00, 0x02, 0x74, 0x69, 0x2E, 0x80, 0xD3, 0x42, 0x0C, 0x70, 0xC6, 0x84, 0x03, 0x76, 0x9B, 0x72, 0xC0, 0x1A, 0x9B, 0x06, 0x58, 0xF5, 0xDC, 0x01, 0x73, 0x6D, 0x1A, 0x60, 0x95, 0x4E, 0x01, 0x8C, 0xA8, 0x42, 0x80, 0xAA, 0x4C, 0x10, 0x10, 0xA5, 0xE9, 0xFF, 0x15 };
const uint8_t spTURN[] PROGMEM = { 0x09, 0xD8, 0x3E, 0x2D, 0x00, 0x3D, 0x8F, 0x2B, 0xA0, 0x54, 0xE3, 0x56, 0xA4, 0xC1, 0xD2, 0xC5, 0xAD, 0x56, 0x95, 0xB7, 0x51, 0x15, 0x75, 0x19, 0x55, 0xDE, 0x45, 0x3E, 0xD4, 0x65, 0x55, 0x25, 0x2F, 0xF3, 0x52, 0x97, 0x55, 0xD5, 0x38, 0x2C, 0xC3, 0x59, 0x57, 0x55, 0xB3, 0x91, 0x47, 0x54, 0x1B, 0x65, 0x51, 0x62, 0xA9, 0x5A, 0x75, 0x94, 0x55, 0xB1, 0x95, 0x69, 0xDC, 0x5E, 0xB6, 0xB2, 0x48, 0x8E, 0x52, 0xB7, 0xD3, 0xAA, 0xAA, 0x55, 0x32, 0xD2, 0xE6, 0xFF, 0x03 };
const uint8_t spSHUT[] PROGMEM = { 0x04, 0x58, 0xE3, 0x5A, 0x03, 0x16, 0xF0, 0x80, 0x07, 0x22, 0x60, 0x81, 0x55, 0xB4, 0xE4, 0xA2, 0x61, 0x5D, 0x6E, 0x71, 0xCA, 0x12, 0x3C, 0xCA, 0x7C, 0xCE, 0xAD, 0x76, 0x31, 0xD7, 0xBC, 0x23, 0x50, 0x84, 0x72, 0x17, 0x91, 0x0D, 0x00, 0x06, 0xE8, 0x44, 0x5D, 0x01, 0x3F, 0x66, 0x11, 0xE0, 0x98, 0x59, 0x04, 0xF4, 0x38, 0xFE, 0xFF };
const uint8_t spIT[] PROGMEM = { 0x2B, 0x19, 0xC1, 0x99, 0x3D, 0xDE, 0xEC, 0xE2, 0x14, 0x2D, 0xBA, 0x88, 0xE5, 0xDB, 0x55, 0xD5, 0x9C, 0xC6, 0xE2, 0x4F, 0x57, 0x9D, 0xB2, 0x99, 0x44, 0x5F, 0x49, 0xAD, 0x2D, 0x1C, 0xB1, 0x6D, 0xDA, 0x0C, 0xD1, 0x98, 0x7A, 0xA9, 0x66, 0x00, 0x50, 0xC0, 0x32, 0x1E, 0x1E, 0x10, 0x40, 0x72, 0x49, 0x0F, 0x00, 0x00 };

const uint8_t spNEW[] PROGMEM = { 0xA9, 0x2F, 0x12, 0x27, 0x44, 0xDC, 0xA6, 0xA1, 0x29, 0x18, 0x0F, 0x4D, 0x1C, 0x86, 0x24, 0x78, 0x45, 0x34, 0x75, 0x1A, 0xAA, 0xC4, 0x71, 0xD5, 0xD8, 0xAD, 0x2F, 0x0A, 0xDB, 0xCD, 0x62, 0xAF, 0xAE, 0x1B, 0x33, 0x0A, 0x7B, 0xBC, 0xEA, 0x6E, 0x4D, 0x39, 0xE4, 0xC9, 0xAA, 0x9B, 0x52, 0x95, 0x92, 0xD5, 0xAD, 0xCD, 0xDC, 0xDC, 0x4B, 0x3E, 0x95, 0x21, 0xCA, 0x70, 0x0F, 0x7D, 0x1D, 0x16, 0xA7, 0x33, 0xCA, 0xE4, 0x91, 0xDB, 0xBC, 0x2C, 0x0F, 0xA7, 0x2F, 0xEE, 0xF0, 0xB2, 0xDD, 0x9D, 0xD6, 0xA8, 0xCB, 0xCB, 0x71, 0x73, 0x5A, 0x63, 0x5E, 0x2B, 0x26, 0x32, 0xA8, 0xAD, 0xFA, 0x9C, 0x19, 0x37, 0x95, 0xAC, 0xE6, 0xF7, 0xBE, 0xDC, 0x55, 0xD3, 0x9A, 0xDF, 0xA9, 0xF1, 0x30, 0x49, 0x6A, 0x7E, 0xAF, 0xDB, 0x42, 0x79, 0x8D, 0xF9, 0x43, 0x76, 0x73, 0x8A, 0x35, 0xFF, 0x0F };
const uint8_t spHIGH[] PROGMEM = { 0x28, 0x5A, 0x1C, 0x01, 0x45, 0x7B, 0x94, 0x32, 0x87, 0xB0, 0x32, 0x8E, 0xB2, 0xF2, 0xE4, 0xC6, 0x33, 0x65, 0xF6, 0xCA, 0x53, 0x68, 0x8F, 0xD4, 0xC5, 0xAB, 0x48, 0xA9, 0x22, 0xDD, 0x17, 0xAD, 0x32, 0xD5, 0xF4, 0x74, 0x5F, 0xBC, 0xBA, 0x1C, 0xCB, 0x32, 0x74, 0xF1, 0x1A, 0x8A, 0x6F, 0x8B, 0xD4, 0xC5, 0x6B, 0xAD, 0xAE, 0xCD, 0x4B, 0x17, 0xAF, 0xA3, 0xBA, 0x56, 0x2F, 0x7D, 0x34, 0xEE, 0xEA, 0x5A, 0xAC, 0x6D, 0x51, 0x7B, 0x9A, 0x6D, 0xF1, 0xD2, 0x47, 0xFD, 0x2D, 0x6F, 0xD1, 0x21, 0x33, 0xF9, 0x30, 0x7D, 0x2D, 0x88, 0x74, 0xD4, 0xE4, 0xF4, 0x57, 0xAF, 0x34, 0xD5, 0x93, 0xD2, 0xDF, 0x82, 0x61, 0x76, 0xCF, 0xFE, 0x7F };
const uint8_t spPOINT[] PROGMEM = { 0x0A, 0xB0, 0x5A, 0x8B, 0x00, 0x5A, 0x47, 0x23, 0x40, 0x99, 0x29, 0x91, 0x7A, 0xE9, 0xD3, 0x12, 0x8C, 0x4A, 0x22, 0x7D, 0xBF, 0x82, 0xB6, 0x19, 0xA9, 0xD1, 0xFD, 0x86, 0x92, 0x66, 0xE5, 0x41, 0xD6, 0xAB, 0x58, 0xB6, 0x53, 0x25, 0xDD, 0x2B, 0xC6, 0x59, 0x4E, 0x93, 0x7D, 0x87, 0x1A, 0xB5, 0x3E, 0x7D, 0xCE, 0x65, 0xAA, 0xBC, 0xBA, 0x0D, 0x29, 0x99, 0x5A, 0xC4, 0xCC, 0x32, 0xE6, 0x10, 0x2C, 0x6A, 0x4D, 0xDC, 0x94, 0x99, 0x98, 0x84, 0x39, 0x43, 0x80, 0x45, 0x1C, 0x08, 0xC8, 0x98, 0x3A, 0x00, 0x49, 0xA6, 0x79, 0x40, 0x00, 0x22, 0x84, 0x3D, 0x00, 0x00 };

const uint8_t spZERO[] PROGMEM = { 0x69, 0xFB, 0x59, 0xDD, 0x51, 0xD5, 0xD7, 0xB5, 0x6F, 0x0A, 0x78, 0xC0, 0x52, 0x01, 0x0F, 0x50, 0xAC, 0xF6, 0xA8, 0x16, 0x15, 0xF2, 0x7B, 0xEA, 0x19, 0x47, 0xD0, 0x64, 0xEB, 0xAD, 0x76, 0xB5, 0xEB, 0xD1, 0x96, 0x24, 0x6E, 0x62, 0x6D, 0x5B, 0x1F, 0x0A, 0xA7, 0xB9, 0xC5, 0xAB, 0xFD, 0x1A, 0x62, 0xF0, 0xF0, 0xE2, 0x6C, 0x73, 0x1C, 0x73, 0x52, 0x1D, 0x19, 0x94, 0x6F, 0xCE, 0x7D, 0xED, 0x6B, 0xD9, 0x82, 0xDC, 0x48, 0xC7, 0x2E, 0x71, 0x8B, 0xBB, 0xDF, 0xFF, 0x1F };
const uint8_t spONE[] PROGMEM = { 0x66, 0x4E, 0xA8, 0x7A, 0x8D, 0xED, 0xC4, 0xB5, 0xCD, 0x89, 0xD4, 0xBC, 0xA2, 0xDB, 0xD1, 0x27, 0xBE, 0x33, 0x4C, 0xD9, 0x4F, 0x9B, 0x4D, 0x57, 0x8A, 0x76, 0xBE, 0xF5, 0xA9, 0xAA, 0x2E, 0x4F, 0xD5, 0xCD, 0xB7, 0xD9, 0x43, 0x5B, 0x87, 0x13, 0x4C, 0x0D, 0xA7, 0x75, 0xAB, 0x7B, 0x3E, 0xE3, 0x19, 0x6F, 0x7F, 0xA7, 0xA7, 0xF9, 0xD0, 0x30, 0x5B, 0x1D, 0x9E, 0x9A, 0x34, 0x44, 0xBC, 0xB6, 0x7D, 0xFE, 0x1F };
const uint8_t spTWO[] PROGMEM = { 0x06, 0xB8, 0x59, 0x34, 0x00, 0x27, 0xD6, 0x38, 0x60, 0x58, 0xD3, 0x91, 0x55, 0x2D, 0xAA, 0x65, 0x9D, 0x4F, 0xD1, 0xB8, 0x39, 0x17, 0x67, 0xBF, 0xC5, 0xAE, 0x5A, 0x1D, 0xB5, 0x7A, 0x06, 0xF6, 0xA9, 0x7D, 0x9D, 0xD2, 0x6C, 0x55, 0xA5, 0x26, 0x75, 0xC9, 0x9B, 0xDF, 0xFC, 0x6E, 0x0E, 0x63, 0x3A, 0x34, 0x70, 0xAF, 0x3E, 0xFF, 0x1F };
const uint8_t spTHREE[] PROGMEM = { 0x0C, 0xE8, 0x2E, 0x94, 0x01, 0x4D, 0xBA, 0x4A, 0x40, 0x03, 0x16, 0x68, 0x69, 0x36, 0x1C, 0xE9, 0xBA, 0xB8, 0xE5, 0x39, 0x70, 0x72, 0x84, 0xDB, 0x51, 0xA4, 0xA8, 0x4E, 0xA3, 0xC9, 0x77, 0xB1, 0xCA, 0xD6, 0x52, 0xA8, 0x71, 0xED, 0x2A, 0x7B, 0x4B, 0xA6, 0xE0, 0x37, 0xB7, 0x5A, 0xDD, 0x48, 0x8E, 0x94, 0xF1, 0x64, 0xCE, 0x6D, 0x19, 0x55, 0x91, 0xBC, 0x6E, 0xD7, 0xAD, 0x1E, 0xF5, 0xAA, 0x77, 0x7A, 0xC6, 0x70, 0x22, 0xCD, 0xC7, 0xF9, 0x89, 0xCF, 0xFF, 0x03 };
const uint8_t spFOUR[] PROGMEM = { 0x08, 0x68, 0x21, 0x0D, 0x03, 0x1C, 0x90, 0xC0, 0x88, 0x92, 0xB2, 0x29, 0x87, 0x76, 0x2B, 0x2D, 0x5C, 0x7B, 0x06, 0xD9, 0xED, 0x74, 0x64, 0x51, 0x54, 0x4D, 0xA2, 0xBA, 0x99, 0xB7, 0x3A, 0xF8, 0xEA, 0x74, 0xCA, 0xD3, 0x87, 0xBE, 0x94, 0x3D, 0xA4, 0xD4, 0x4E, 0xC9, 0x5F, 0xF7, 0x72, 0xA7, 0x9C, 0x1C, 0x63, 0xDE, 0xF2, 0x9B, 0xBE, 0x34, 0x84, 0x27, 0x2D, 0x4B, 0xF8, 0x53, 0x09, 0x9C, 0x0E, 0xB7, 0xEE, 0xCB, 0x5B, 0x70, 0xDD, 0xB2, 0xFC, 0x3F };
const uint8_t spFIVE[] PROGMEM = { 0x08, 0x68, 0x4E, 0x9D, 0x02, 0x1C, 0x60, 0xC0, 0x8C, 0x69, 0x12, 0xB0, 0xC0, 0x28, 0xAB, 0x8C, 0x9C, 0xC0, 0x2D, 0xBB, 0x38, 0x79, 0x31, 0x15, 0xA3, 0xB6, 0xE4, 0x16, 0xB7, 0xDC, 0xF5, 0x6E, 0x57, 0xDF, 0x54, 0x5B, 0x85, 0xBE, 0xD9, 0xE3, 0x5C, 0xC6, 0xD6, 0x6D, 0xB1, 0xA5, 0xBF, 0x99, 0x5B, 0x3B, 0x5A, 0x30, 0x09, 0xAF, 0x2F, 0xED, 0xEC, 0x31, 0xC4, 0x5C, 0xBE, 0xD6, 0x33, 0xDD, 0xAD, 0x88, 0x87, 0xE2, 0xD2, 0xF2, 0xF4, 0xE0, 0x16, 0x2A, 0xB2, 0xE3, 0x63, 0x1F, 0xF9, 0xF0, 0xE7, 0xFF, 0x01 };
const uint8_t spSIX[] PROGMEM = { 0x04, 0xF8, 0xB9, 0x55, 0x01, 0xBF, 0xA5, 0x1B, 0xE0, 0x37, 0x0F, 0x03, 0xFC, 0x96, 0x61, 0x80, 0xDF, 0x3C, 0x0C, 0xF0, 0x93, 0xDA, 0x4A, 0x87, 0x49, 0x53, 0x91, 0x37, 0x2B, 0x6D, 0xD2, 0x55, 0x23, 0xDE, 0xAC, 0xAA, 0xB9, 0x16, 0x09, 0xFF, 0xB2, 0xFA, 0x66, 0x93, 0x3C, 0x63, 0xF3, 0x9C, 0x10, 0x38, 0x45, 0xA9, 0x0A, 0xD5, 0x00, 0x00, 0x02, 0x14, 0x97, 0xAA, 0x80, 0xAB, 0x6B, 0x0D, 0xF0, 0x63, 0xA5, 0x01, 0x7E, 0xCB, 0x30, 0xC0, 0x6F, 0xE9, 0x0A, 0xF8, 0x25, 0x93, 0x01, 0x3F, 0x57, 0xFC, 0x3F };
const uint8_t spSEVEN[] PROGMEM = { 0x0C, 0x78, 0xC6, 0x95, 0x01, 0x3F, 0xA5, 0x28, 0xE0, 0xB7, 0x52, 0x0B, 0x04, 0xE0, 0xB7, 0x54, 0x07, 0xFC, 0x52, 0x66, 0x80, 0x9F, 0xCB, 0x56, 0x59, 0x6C, 0x98, 0x47, 0x3E, 0x59, 0x4D, 0x89, 0x69, 0x66, 0xB9, 0x7A, 0x34, 0x39, 0x86, 0x9B, 0xD9, 0xA6, 0xD4, 0xE7, 0x10, 0xAE, 0xCA, 0xAD, 0x47, 0x97, 0x5D, 0x9A, 0xA9, 0xAE, 0x1A, 0x75, 0xB1, 0xA5, 0x66, 0xF9, 0xB2, 0xD4, 0x4D, 0x63, 0xB6, 0x84, 0x9A, 0x52, 0x76, 0x45, 0x11, 0x1A, 0xAA, 0x4B, 0x31, 0x0C, 0x79, 0x4A, 0xB0, 0x49, 0xC5, 0x50, 0xA2, 0x41, 0xA1, 0xC9, 0x65, 0xD9, 0xAB, 0x89, 0x56, 0x84, 0xFF, 0x07 };
const uint8_t spEIGHT[] PROGMEM = { 0xAD, 0x1B, 0xDE, 0x58, 0x23, 0x17, 0xAF, 0x6E, 0xE8, 0x20, 0xEB, 0x5C, 0xBC, 0xEA, 0x61, 0x03, 0xAD, 0x73, 0xF6, 0xAA, 0x66, 0x4A, 0xD0, 0xCC, 0xD9, 0xAB, 0x1E, 0x45, 0xC1, 0xA3, 0x66, 0xAF, 0x61, 0x36, 0x03, 0x8B, 0x5A, 0x9C, 0xA6, 0x51, 0x04, 0xA2, 0x66, 0x96, 0xBB, 0xBA, 0x47, 0xEC, 0xED, 0x8A, 0x08, 0x9C, 0xA2, 0x54, 0x85, 0x6A, 0x00, 0x80, 0x02, 0x86, 0x74, 0x63, 0xC0, 0xE6, 0x6A, 0xFF, 0x0F };
const uint8_t spNINE[] PROGMEM = { 0x62, 0x75, 0xDC, 0x33, 0xB5, 0x62, 0xB9, 0x25, 0x0B, 0x8E, 0x34, 0x8F, 0xD3, 0xA6, 0xAE, 0x59, 0xD2, 0x34, 0xE9, 0x18, 0x87, 0x27, 0xC9, 0xD0, 0x78, 0xAB, 0x6F, 0xCE, 0xC2, 0x45, 0x1B, 0xAF, 0xB6, 0xF8, 0x51, 0x73, 0x9D, 0xB3, 0x9A, 0x12, 0xC7, 0x2C, 0x6D, 0xC9, 0xAA, 0x73, 0x4B, 0xF3, 0x88, 0x26, 0xAB, 0xCE, 0x2D, 0xCC, 0x23, 0xEA, 0xAC, 0x26, 0xB7, 0xD0, 0x88, 0x98, 0xB3, 0xBA, 0x5C, 0x43, 0x32, 0x7D, 0xCE, 0x1A, 0x4A, 0x0A, 0xCD, 0xF4, 0x39, 0x6B, 0xAA, 0x3E, 0x24, 0xCB, 0x67, 0xAF, 0xB5, 0xD9, 0xE4, 0x18, 0x5F, 0xB4, 0xF6, 0x6E, 0x92, 0x62, 0x7D, 0xD1, 0x38, 0xBA, 0x09, 0xF2, 0x8D, 0x59, 0xED, 0xE8, 0x3A, 0xD8, 0x27, 0x16, 0xA6, 0xBB, 0x7B, 0xF2, 0x74, 0x4F, 0x92, 0x9E, 0x1E, 0xC8, 0x4A, 0xC3, 0x49, 0x7A, 0x9A, 0x25, 0x2B, 0xF5, 0x24, 0xE9, 0xEE, 0xD1, 0x24, 0x25, 0x27, 0xBA, 0xBB, 0x25, 0x51, 0xD3, 0xAA, 0x24, 0xAE, 0x5E, 0x54, 0x55, 0x3A, 0xD4, 0xFF, 0x03 };

const uint8_t spTO[] PROGMEM = { 0x09, 0xD8, 0x4E, 0x34, 0x00, 0x4B, 0xA7, 0xA5, 0xBC, 0xE9, 0x62, 0x55, 0x4B, 0x53, 0x9A, 0xAC, 0x5C, 0x2D, 0xF9, 0x4B, 0xE9, 0x32, 0x73, 0xD3, 0xA1, 0x3D, 0xA5, 0x4F, 0x52, 0x2D, 0x9B, 0xB6, 0xA4, 0x21, 0x79, 0x95, 0xC0, 0xAC, 0xAD, 0x16, 0xED, 0xDC, 0x22, 0x23, 0xC2, 0xFF, 0x03 };
const uint8_t spPLAY[] PROGMEM = { 0x06, 0xC8, 0x55, 0x54, 0x01, 0x49, 0x69, 0x94, 0xC4, 0xA4, 0x1C, 0xE3, 0x8A, 0xD3, 0x93, 0x19, 0xAF, 0x24, 0xE4, 0x68, 0xE1, 0x4D, 0xBC, 0x92, 0x58, 0x22, 0x95, 0x27, 0xF1, 0x4A, 0x53, 0xF5, 0x10, 0x99, 0x26, 0xB3, 0x68, 0x75, 0x29, 0x12, 0xE2, 0x53, 0xBB, 0x74, 0x31, 0x52, 0x64, 0x4F, 0xD8, 0xDA, 0xA7, 0x3E, 0x3A, 0xF6, 0xAC, 0x2C, 0x13, 0xFA, 0xA0, 0x39, 0xBA, 0x33, 0x88, 0xEB, 0x8D, 0x92, 0xB9, 0x70, 0xA1, 0x0F, 0x00, 0x00 };


// Variables for score parsing
const int MAX_DIGITS = 10;
int scoreArray[MAX_DIGITS];
int scoreDigits = 0;

// Threshold for the sensors
const int LIGHT_THRESHOLD = 50;
const int ACCEL_THRESHOLD = 0;
int light = 0;


// Constants for Sounds
const int NOTE_1 = 100;
const int NOTE_2 = 75;

// Variable for score
volatile int score = 0;

// Variable for highscore
int highscore = 0;

// Variable for correct trigger
volatile bool trigger = false;

// Flags for debounce
volatile bool switchFlag = false;
volatile bool leftFlag = false;
volatile bool rightFlag = false;

// Game state variable
int state = 0;

/*
0: Startup - Displays lights and starting tune
1: Game Start/Reset - Resets all variables
2: Round Start - picks random game and says instructions
3: Detect - Waits for user input or timeout
4: Fail (nonhighscore) - Says earned score and current highscore
5: Fail (highscore) - Variation where you beat the highscore
6: Game End - Waits for user input to transition to Reset state
*/

// Game variation variable
int game = 0;

/*
0: Button press
1: Switch input
2: Accel threshold
3: Light input
*/

// Timers
AsyncDelay inputTimeout;
const int TIMEOUT = 100;

AsyncDelay lightTimer;
const int TIMELIGHT = 200;

int timerCount = 0;

const int TIMER_MAX = 50;
const int TIMER_MIN = 5;
const int SCORE_MAX = 25;

// Variable for lights
bool lightState = false;

void setup() {
  //Timer and Board setup
  CircuitPlayground.begin();

  // Randomize seed
  randomSeed(analogRead(A0));

  // interrupt for switch
  attachInterrupt(digitalPinToInterrupt(7), switchInterrupt, CHANGE);  //switch

  // interrupt for left button
  attachInterrupt(digitalPinToInterrupt(4), leftInterrupt, FALLING);  //left button

  // interrupt for right button
  attachInterrupt(digitalPinToInterrupt(5), rightInterrupt, FALLING);  //right button

  inputTimeout.start(TIMEOUT, AsyncDelay::MILLIS);
  lightTimer.start(TIMELIGHT, AsyncDelay::MILLIS);
}

void loop() {
  switch (state) {
    case 0:
      // Intro sequence and sound
      for (int i = 0; i <= 9; i++) {
        CircuitPlayground.setPixelColor(i, 0, 0, 255);
      }

      // Intro melody
      analogWrite(A0, 10);
      CircuitPlayground.playTone(524, NOTE_1);
      CircuitPlayground.playTone(524, NOTE_1);
      CircuitPlayground.playTone(329, NOTE_1);
      CircuitPlayground.playTone(329, NOTE_1);
      CircuitPlayground.playTone(440, NOTE_1);
      CircuitPlayground.playTone(440, NOTE_1);
      delay(100);
      CircuitPlayground.playTone(329, NOTE_2);
      CircuitPlayground.playTone(440, NOTE_2);
      CircuitPlayground.playTone(493, NOTE_2);
      CircuitPlayground.playTone(524, NOTE_2);

      analogWrite(A0, 255);
      state = 1;
      break;
    case 1:
      // Game reset/setup
      score = 0;
      game = 0;
      trigger = false;

      // Flags
      switchFlag = true;
      rightFlag = true;
      leftFlag = true;

      CircuitPlayground.clearPixels();
      state = 2;
      break;
    case 2:
      // Round setup
      Serial.print("Score: ");
      Serial.println(score);
      // Flags
      switchFlag = true;
      rightFlag = true;
      leftFlag = true;

      delay(1000);

      // Pick random game
      game = random(0, 4);

      switch (game) {
        case 0:
          Serial.println("Press It!");
          CircuitPlayground.speaker.say(spPRESS);
          CircuitPlayground.speaker.say(spIT);
          rightFlag = false;
          leftFlag = false;
          break;
        case 1:
          Serial.println("Switch It!");
          CircuitPlayground.speaker.say(spSWITCH);
          CircuitPlayground.speaker.say(spIT);
          switchFlag = false;
          break;
        case 2:
          Serial.println("Shut It!");
          CircuitPlayground.speaker.say(spSHUT);
          CircuitPlayground.speaker.say(spIT);
          break;
        case 3:
          Serial.println("Turn It!");
          CircuitPlayground.speaker.say(spTURN);
          CircuitPlayground.speaker.say(spIT);
          break;
      }

      timerCount = 0;

      state = 3;

      inputTimeout.restart();
      lightTimer.restart();

      break;
    case 3:
      // Detect input/timeout
      if (rightFlag) {
        delay(25);
        rightFlag = false;
      }
      if (leftFlag) {
        delay(25);
        leftFlag = false;
      }
      if (switchFlag) {
        delay(25);
        switchFlag = false;
      }

      // Check the timer to see if it expired
      if (inputTimeout.isExpired()) {
        timerCount++;
        inputTimeout.restart();
      }

      if (timerCount > map(score, 0, SCORE_MAX, TIMER_MAX, 1)) {
        if (score > highscore) {
          state = 5;
        } else {
          state = 4;
        }
      }
      // If timer is not expired, then check for inputs
      switch (game) {
        case 0:
          // Button input, waits for trigger to switch to true
          if (trigger) {
            score++;
            trigger = false;
            state = 2;
            analogWrite(A0, 10);
            CircuitPlayground.playTone(523, NOTE_1);
            analogWrite(A0, 255);
          }
          break;
        case 1:
          // Switch input, waits for trigger to switch to true
          if (trigger) {
            score++;
            trigger = false;
            state = 2;
            analogWrite(A0, 10);
            CircuitPlayground.playTone(523, NOTE_1);
            analogWrite(A0, 255);
          }
          break;
        case 2:
          // Light input, waits for recorded light to drop BELOW threshold
          light = CircuitPlayground.lightSensor();
          light = constrain(light, 0, 1000);
          if (light < LIGHT_THRESHOLD) {
            score++;
            state = 2;
            analogWrite(A0, 10);
            CircuitPlayground.playTone(523, NOTE_1);
            analogWrite(A0, 255);
          }
          break;
        case 3:
          // Accelerometer input, waits for acceleration to fall BELOW threshold
          // When the board is right side up, gravity makes the value ~9.8
          // Flipping the board upside down will make the value go negative
          if (CircuitPlayground.motionZ() < ACCEL_THRESHOLD) {
            game = 4;
            delay(10);
          }
          break;
        case 4:
          // Waits for player to flip the board back over
          if (CircuitPlayground.motionZ() > ACCEL_THRESHOLD) {
            state = 2;
            score++;
            analogWrite(A0, 10);
            CircuitPlayground.playTone(523, NOTE_1);
            analogWrite(A0, 255);
          }
          break;
      }

      // Light code
      if (lightTimer.isExpired()) {
        lightState = !lightState;
        lightTimer.restart();
      }

      if (lightState) {
        for (int i = 0; i <= 5; i++) {
          CircuitPlayground.setPixelColor(i, 0, 0, 255);
        }

        for (int i = 5; i <= 9; i++) {
          CircuitPlayground.setPixelColor(i, 0, 0, 0);
        }
      } else {
        for (int i = 0; i <= 5; i++) {
          CircuitPlayground.setPixelColor(i, 0, 0, 0);
        }

        for (int i = 5; i <= 9; i++) {
          CircuitPlayground.setPixelColor(i, 0, 0, 255);
        }
      }

      break;
    case 4:
      // Fail state
      for (int i = 0; i <= 9; i++) {
        CircuitPlayground.setPixelColor(i, 255, 0, 0);
      }
      Serial.println("Too Slow!");
      analogWrite(A0, 10);
      CircuitPlayground.playTone(466, NOTE_1);
      CircuitPlayground.playTone(415, NOTE_1);
      CircuitPlayground.playTone(369, NOTE_1);
      analogWrite(A0, 255);
      delay(250);

      Serial.print("Point: ");
      Serial.println(score);

      CircuitPlayground.speaker.say(spPOINT);
      delay(500);
      sayScore(score);

      delay(1000);
      state = 6;
      rightFlag = false;
      leftFlag = false;

      CircuitPlayground.speaker.say(spPRESS);
      CircuitPlayground.speaker.say(spTO);
      CircuitPlayground.speaker.say(spPLAY);

      break;

    case 5:
      // Fail state Highscore
      for (int i = 0; i <= 9; i++) {
        CircuitPlayground.setPixelColor(i, 255, 0, 0);
      }

      Serial.println("Too Slow!");
      analogWrite(A0, 10);
      CircuitPlayground.playTone(466, NOTE_1);
      CircuitPlayground.playTone(415, NOTE_1);
      CircuitPlayground.playTone(369, NOTE_1);
      analogWrite(A0, 255);
      delay(250);

      highscore = score;

      Serial.print("New High Point! ");
      Serial.println(score);

      CircuitPlayground.speaker.say(spNEW);
      CircuitPlayground.speaker.say(spHIGH);
      CircuitPlayground.speaker.say(spPOINT);
      delay(500);
      sayScore(score);

      delay(1000);
      state = 6;

      rightFlag = false;
      leftFlag = false;

      CircuitPlayground.speaker.say(spPRESS);
      CircuitPlayground.speaker.say(spTO);
      CircuitPlayground.speaker.say(spPLAY);

      break;

    case 6:
      // Wait for user input for next game
      if (rightFlag || leftFlag) {
        state = 1;
      }
      rainbowCycle(50, 10);
      break;
  }
}

void switchInterrupt() {
  if (!switchFlag) {
    switchFlag = true;
    if (game == 1) {
      trigger = true;
    }
  }
}

void rightInterrupt() {
  if (!rightFlag) {
    rightFlag = true;
    if (game == 0) {
      trigger = true;
    }
  }
}

void leftInterrupt() {
  if (!leftFlag) {
    leftFlag = true;
    if (game == 0) {
      trigger = true;
    }
  }
}


// Rainbow cycle from Kaleidoscope project
// Credit to Chet Udell
void rainbowCycle(int currentSpeed, int stripLen) {

  // Make an offset based on the current millisecond count scaled by the current speed.

  uint32_t offset = millis() / currentSpeed;

  // Loop through each pixel and set it to an incremental color wheel value.

  for (int i = 0; i < 10; ++i) {

    CircuitPlayground.setPixelColor(i, CircuitPlayground.colorWheel(((i * 256 / stripLen) + offset) & 255));
  }
}

void sayScore(int score) {
  // Takes score value, and says the numbers

  mapToArray(score);
  // Maps score values to an array

  for (int i = 0; i < scoreDigits; i++) {
    switch (scoreArray[i]) {
      case 0:
        CircuitPlayground.speaker.say(spZERO);
        break;
      case 1:
        CircuitPlayground.speaker.say(spONE);
        break;
      case 2:
        CircuitPlayground.speaker.say(spTWO);
        break;
      case 3:
        CircuitPlayground.speaker.say(spTHREE);
        break;
      case 4:
        CircuitPlayground.speaker.say(spFOUR);
        break;
      case 5:
        CircuitPlayground.speaker.say(spFIVE);
        break;
      case 6:
        CircuitPlayground.speaker.say(spSIX);
        break;
      case 7:
        CircuitPlayground.speaker.say(spSEVEN);
        break;
      case 8:
        CircuitPlayground.speaker.say(spEIGHT);
        break;
      case 9:
        CircuitPlayground.speaker.say(spNINE);
        break;
    }
  }
  Serial.println("");
}

void mapToArray(int number) {
  scoreDigits = 0;

  // If score is 0, then set digits to 1 and return
  if (number == 0) {
    scoreArray[0] = 0;
    scoreDigits = 1;
    return;
  }

  // Extract digits into array
  while (number > 0 && scoreDigits < MAX_DIGITS) {
    scoreArray[scoreDigits++] = number % 10;
    number /= 10;
  }

  // Reverse array to get largest digit first
  for (int i = 0; i < scoreDigits / 2; i++) {
    int temp = scoreArray[i];
    scoreArray[i] = scoreArray[scoreDigits - 1 - i];
    scoreArray[scoreDigits - 1 - i] = temp;
  }
}